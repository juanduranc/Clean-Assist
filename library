import statistics
from decimal import Decimal
import pandas as pd
import math
from scipy import stats

def clean_assist(df, n_rows, n_round):
        """
    Displays relevant features to help you on data cleaning and analysis.
    
    PARAMETERS
    ----------
    df      : DataFrame you would like to analyze
    n_rows  : Number of variables to display
    n_round : Number of decimals to round calculations
    """
        n_rows +=1
        pd.set_option('display.max_rows', n_rows)
        nulls = df.isnull().sum()
        counts = df.count()
        means = round(df.mean(), n_round)
        types = df.dtypes
        median = round(df.median(), n_round)
        result = pd.concat([nulls, counts, types, means, median], axis = 1, sort=False)
        result.rename(columns={0: 'NULLS', 1: 'COUNT', 2: 'TYPES', 3:'MEAN', 4:'MEDIAN'}, inplace=True)
        result['UNIQUES'] = ''
        result['SAMPLE'] = ''
        result['Outliers'] = ''
        result['pval(Norm)'] = ''
        i1 = 0
        norma = {}
        for i in df.columns:
            list1 = df[i][0:10].to_list()
            result['SAMPLE'].values[i1] = str(list1)
            va = int(df[i].value_counts().shape[0])
            result['UNIQUES'].values[i1] = va
            
            if df[i].dtype.name != 'object':
                col_data = df[i].dropna()
                IQR_25 = np.percentile(col_data, 25)
                IQR_75 = np.percentile(col_data, 75)
                IQR_1p5 = round(1.5*(IQR_75-IQR_25), n_round)
                lowerLimit = round(IQR_25 - IQR_1p5, n_round)
                upperLimit = round(IQR_75 + IQR_1p5, n_round)
                
                lower_qty = int(df[i][df[i] < lowerLimit].shape[0])
                high_qty = int(df[i][df[i] > upperLimit].shape[0])
                if (lower_qty > 0 or high_qty > 0) and va > 2:
                    result['Outliers'].values[i1] = '[' + str(lower_qty) + ',' + str(high_qty) + ']'
                else:
                    result['Outliers'].values[i1] = ''
                p=0
                mu = df[i].mean()
                sigma = statistics.stdev(df[i])
                if not math.isnan(sigma) and not sigma == 0:
                    sizex = int(df[i].shape[0])
                    nom_rand = np.random.normal(mu, sigma, sizex)
                    rom_test = df[i].tolist()
                    st2, pval_2 = stats.ks_2samp(nom_rand, rom_test)
                    stn, pval_n = stats.normaltest(rom_test)
                    # ++++++++++++++++++++++++++++++++++++++++++++++++
                    p = max([pval_n, pval_2])
                    
                    p = Decimal(p)
                    if abs(p.as_tuple().exponent) >= 4:
                        p = float('{0:1.0e}'.format(p))
                    result['pval(Norm)'].values[i1] = p
                else:
                    result['pval(Norm)'].values[i1] = 0
            else:
                result['pval(Norm)'].values[i1] = 0
            i1+=1
        result.reset_index(inplace=True)
        result=result.rename(columns = {'index':'VARIABLES'})
        print("Data Loaded ok")
        return (result)
